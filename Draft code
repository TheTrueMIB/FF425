# Load necessary libraries
library(GGally)     # For ggpairs visualizations
library(dplyr)      # For data manipulation
library(tidyr)      # For reshaping data
library(readr)      # For reading CSV files
library(MASS)       # For stepAIC and Box-Cox
library(caret)      # For cross-validation and modeling utilities

# Read dataset
data <- read_csv("C:/Users/Jackw/OneDrive/桌面/STAT425/FF425/StudentsHabits.csv")  # Load student data

# Recode categorical variables to numeric for modeling
# Gender: Female = 1, Male/Other = 0
# Diet quality: Poor = 0, Fair = 1, Good = 2
# Parental education: None = 0 to Master = 3
# Internet quality: Poor = 0 to Good = 2
datamutate <- data %>%
  mutate(
    gender = recode(gender, "Male" = 0,"Female" = 1, "Other" = 0),
    diet_quality = recode(diet_quality, "Poor" = 0,"Fair" = 1, "Good" = 2),
    parental_education_level = recode(parental_education_level, "None" = 0,"High School" = 1, "Bachelor" = 2,"Master" = 3),
    internet_quality = recode(internet_quality, "Poor" = 0,"Average" = 1, "Good" = 2)
  )

# Check number of observations
n <- nrow(data); n

# Visualize pairwise relationships among selected variables
ggpairs(data[,c(3,4,5,8)])

# Scatterplot of exam score vs study hours, grouped by job and diet quality
ggplot(data) + 
  geom_point(aes(y = exam_score, x  = study_hours_per_day)) +
  facet_grid(vars(part_time_job), vars(diet_quality))

# Fit full linear model with all time-related and demographic variables
model = lm(exam_score ~ age + study_hours_per_day+
           social_media_hours+
           netflix_hours+
           attendance_percentage+
           sleep_hours,
           data = datamutate)
summary(model)  # View model output

# Fit reduced model without age and netflix
data <- datamutate
reduced = lm(exam_score ~ study_hours_per_day+
                       social_media_hours+
                       attendance_percentage+
                       sleep_hours,
                     data = datamutate)
anova(reduced, model)  # Compare reduced vs full model

# Stepwise model selection using AIC
step_model <- stepAIC(model, direction = "both")
summary(step_model)

# Perform PCA on time-related variables to reduce multicollinearity
time_vars = dplyr::select(data, study_hours_per_day, social_media_hours, attendance_percentage, sleep_hours)
pca_model <- prcomp(time_vars, center = TRUE, scale. = TRUE)
summary(pca_model)  # Check variance explained by components

# Keep first 3 principal components and bind them to data
pc_scores <- as.data.frame(pca_model$x[, 1:3])
colnames(pc_scores) <- c("PC_effort_1", "PC_effort_2", "PC_effort_3")
datamutate <- bind_cols(datamutate, pc_scores)

# Fit full ANCOVA-style model with PCs and other covariates
model_ancova <- lm(
  exam_score ~ 
     PC_effort_1+PC_effort_2+PC_effort_3+
    diet_quality + exercise_frequency + parental_education_level + 
    mental_health_rating + internet_quality +
    extracurricular_participation + part_time_job + gender,
  data = datamutate
)
summary(model_ancova)  # View ANCOVA model summary

# Use AIC to refine the ANCOVA model
step_model <- stepAIC(model_ancova, direction = "both")
summary(step_model)

# Fit model using original time variables to compare against PCA version
model_ancovare <- lm(
  exam_score ~ 
     study_hours_per_day + social_media_hours +
    attendance_percentage + sleep_hours +
    diet_quality + exercise_frequency + parental_education_level + 
    mental_health_rating + internet_quality +
    extracurricular_participation + part_time_job + gender,
  data = datamutate
)
summary(model_ancovare)  # Summary of non-PCA model
anova(model_ancovare, model_ancova)  # Compare PCA vs non-PCA model

