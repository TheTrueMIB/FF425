# Load necessary libraries for modeling and diagnostics
library(MASS)        # For stepAIC and boxcox
library(olsrr)       # For p-value based stepwise selection
library(caret)       # For cross-validation
library(car)         # For VIF diagnostics

# Fit polynomial regression model with cubic terms for PCs and other squared predictors
model_cubic <- lm(
  exam_score ~ 
    PC_effort_1 + I(PC_effort_1^2) + I(PC_effort_1^3) +
    PC_effort_2 + I(PC_effort_2^2) + I(PC_effort_2^3) +
    PC_effort_3 + I(PC_effort_3^2) + I(PC_effort_3^3) +
    attendance_percentage + I(attendance_percentage^2) + I(attendance_percentage^3) +
    diet_quality + I(diet_quality^2) +
    exercise_frequency + I(exercise_frequency^2) +
    parental_education_level + I(parental_education_level^2) +
    mental_health_rating + I(mental_health_rating^2) +
    internet_quality + I(internet_quality^2) +
    extracurricular_participation + part_time_job + gender,
  data = datamutate
)
summary(model_cubic)   # Summarize the cubic regression model

# Fit full interaction model including all two-way interactions + quadratic term
model_interaction <- lm(
  exam_score ~ 
    (PC_effort_1+PC_effort_2+PC_effort_3+
     diet_quality + exercise_frequency + parental_education_level + 
     mental_health_rating + internet_quality +
     extracurricular_participation + part_time_job + gender)^2 +
    I(diet_quality^2),
  data = datamutate
)
summary(model_interaction)   # View full interaction model

# Apply AIC-based stepwise selection to reduce model complexity
model_selected <- stepAIC(model_interaction, direction = "both", trace = TRUE)
summary(model_selected)      # View selected model

# Perform p-value based stepwise selection
model_pval_selected <- ols_step_both_p(model_selected, prem = 0.05, prem = 0.01)
summary(model_pval_selected$model)   # View p-value selected model
final_model <- model_pval_selected$model  # Assign to final_model

# Cross-validation setup for final model
train_control <- trainControl(method = "cv", number = 10)
model_cv <- train(
  formula(final_model),  # Use selected model formula
  data = datamutate,
  method = "lm",
  trControl = train_control
)

# Evaluate model performance and diagnostics
print(model_cv)        # View CV results
vif(final_model)       # Check multicollinearity via VIF
summary(model_cv)      # Detailed CV summary
summary(final_model)   # Final model summary

# Attempt Box-Cox transformation for better residual normality
final_model_lm <- lm(
  exam_score ~ 
    PC_effort_2 + PC_effort_3 + mental_health_rating + exercise_frequency +
    part_time_job + part_time_job:PC_effort_1,
  data = datamutate
)

boxcox(final_model_lm, lambda = seq(-3, 4, 0.1))  # Explore transformation

# Apply Box-Cox transformation with lambda ~ 3.2
lambda <- 3.2
datamutate$exam_score_bc <- (datamutate$exam_score^lambda - 1) / lambda  # Transformed target

# Refit interaction model using Box-Cox transformed response
model_interactionbc <- lm(
  exam_score_bc ~ 
    (PC_effort_1+PC_effort_2+PC_effort_3+
     diet_quality + exercise_frequency + parental_education_level + 
     mental_health_rating + internet_quality +
     extracurricular_participation + part_time_job + gender)^2 +
    I(diet_quality^2),
  data = datamutate
)
summary(model_interactionbc)   # Summarize transformed interaction model

# Stepwise AIC selection on transformed model
model_selectedbc <- stepAIC(model_interactionbc, direction = "both", trace = TRUE)
summary(model_selectedbc)      # Final Box-Cox selected model summary


